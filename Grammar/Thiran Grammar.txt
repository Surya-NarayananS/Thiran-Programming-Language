#####################################################
(c) 2023 Surya Narayanan <suryanarayanansg@gmail.com>
#####################################################
       Grammar for Thiran Programming Language
#####################################################

program -> [statement]*
statement -> assign_statement | function_call_statement | IO_statement | structure | jump_statement | import_statement
structure -> conditional | loop | function
function -> func variable [LPAREN] (variable [[COMMA][variable]]*)* [RPAREN] [:] (statement)* END
loop -> for_loop | while_loop
for_loop -> REPEAT [LPAREN] (int|variable) [RPAREN] [:] (statement)* END
while_loop -> WHILE [LPAREN] logical [RPAREN] [:] (statement)* END
conditional -> IF [LPAREN] (logical) [RPAREN] [:] statement ([ELIF][LPAREN] (logical) [RPAREN] [:] statement)* ([ELSE] [LPAREN] (logical) [RPAREN] [:] statement)? END
assign_statement -> variable ASSIGN [logical | userInput | function_call_statement]
function_call_statement -> variable [LPAREN] (param [[COMMA][param]]*)* [RPAREN]
IO_statement -> PRINT [LPAREN] (logical | function_call_statement [[COMMA]([logical]|[function_call_statement])]*) [RPAREN] | assign_statement
jump_statement -> RETURN (logical)? | CONTINUE | BREAK
import_statement -> IMPORT [LPAREN][modulename][[COMMA][modulename]]*[RPAREN]
variable -> ID
logical -> comparison ([AND|OR] comparison)*
comparison -> [NOT] comparison | expression ([==|!=|<|>|<=|>=] expression)*
expression -> term [[+ | -] term]*
term -> factor [[* | / | %] factor]*
factor -> [plus | minus] factor | [int | float] | [LPAREN]logical[RPAREN] | variable | string | list | listIndex | function_call_statement
list -> [LSQBR] [(factor)[[COMMA][factor]]*]* [RSQBR]
listIndex -> [list | variable][LSQBR][int|variable][RSQBR]
int -> [digit]*
float -> [digit]* ['.'] [digit]*
digit -> 0|1|2|3|4|5|6|7|8|9
string -> ["][letters|digit|symbols]*["]
param -> variable | [int | float] | string | [plus | minus] param | list | listIndex | logical
